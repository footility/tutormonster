[
  {
    "title": "Introduzione a Vue.js",
    "faqs": [
      {
        "question": "Che cos'è Vue.js?",
        "answer": "Framework JavaScript per interfacce utente e SPA."
      },
      {
        "question": "API in Vue 3 e uso delle Options API?",
        "answer": "Due API: Options e Composition. Options usate per semplicità didattica."
      },
      {
        "question": "Importanza e esempi di direttive Vue.js?",
        "answer": "Essenziali per interazione con DOM, es. v-model, v-bind."
      }
    ]
  },
  {
    "title": "Vue.js: v-if, v-for, e Reactivity",
    "faqs": [
      {
        "question": "Come funziona la direttiva v-if in Vue.js?",
        "answer": "La direttiva v-if permette di inserire condizioni nel DOM, creando elementi condizionali basati su variabili booleane o espressioni."
      },
      {
        "question": "In cosa si differenzia v-show da v-if?",
        "answer": "v-show e v-if sono entrambe direttive condizionali, ma v-show nasconde l'elemento senza rimuoverlo dal DOM, mentre v-if rimuove completamente l'elemento se la condizione non è soddisfatta."
      },
      {
        "question": "Qual è lo scopo della direttiva v-for in Vue.js?",
        "answer": "v-for è usata per renderizzare un elenco di elementi basato sui dati di un array o di un oggetto, creando una nuova istanza del DOM per ogni elemento nell'elenco."
      },
      {
        "question": "Cos'è il sistema di reattività in Vue.js?",
        "answer": "Il sistema di reattività in Vue.js permette di aggiornare automaticamente il DOM in risposta ai cambiamenti di dati, utilizzando Proxy per intercettare e reagire alle modifiche."
      }
    ]
  },

  {
    "title": "Vue.js, Axios, AJAX, e API",
    "faqs": [
      {
        "question": "Quali tecnologie aggiuntive servono per AJAX in JavaScript?",
        "answer": "Nessun nuovo linguaggio di programmazione è richiesto. JavaScript può fare chiamate a server esterni, spesso facilitato da librerie come Axios."
      },
      {
        "question": "Componenti principali di una richiesta HTTP?",
        "answer": "Una richiesta HTTP è composta da riga di richiesta, header, riga vuota, e body della richiesta. I metodi HTTP comuni includono GET e POST."
      },
      {
        "question": "Che cos'è Axios e come si integra con Vue.js?",
        "answer": "Axios è una libreria JavaScript per chiamate asincrone HTTP, che si integra con Vue.js per inviare e ricevere dati dal server."
      },
      {
        "question": "Differenze tra JSON e XML?",
        "answer": "JSON (JavaScript Object Notation) ha una notazione semplice e familiare per JavaScript. XML (eXtensible Markup Language) è più complesso e meno usato in JavaScript."
      },
      {
        "question": "Esempi di codici di risposta HTTP e significati?",
        "answer": "Esempi includono 200 OK (contenuto fornito correttamente), 301 Moved Permanently (risorsa spostata), 400 Bad Request (richiesta non comprensibile), 404 Not Found (risorsa non trovata), 500 Internal Server Error (problema interno del server)."
      }
    ]
  },
  {
    "title": "Uso del Terminale",
    "faqs": [
      {
        "question": "Qual è lo scopo principale del terminale?",
        "answer": "Il terminale permette di interagire con il sistema operativo usando comandi testuali invece del mouse, per dirigere il computer."
      },
      {
        "question": "Come si differenziano gli elementi radice nei sistemi operativi principali?",
        "answer": "Windows usa 'C:' come elemento radice, mentre sia macOS che Linux usano '/' come radice del filesystem."
      },
      {
        "question": "Quali sono alcuni comandi base del terminale?",
        "answer": "Comandi base includono 'cd' per cambiare directory, 'mkdir' per creare una directory, 'rmdir' per rimuovere una directory, e 'ls' per elencare i contenuti di una directory."
      },
      {
        "question": "Qual è la differenza nell'uso delle maiuscole e minuscole nei path tra i diversi sistemi operativi?",
        "answer": "Windows non differenzia tra maiuscole e minuscole nei path, mentre sia macOS che Linux lo fanno."
      },
      {
        "question": "Come si creano e gestiscono i file di testo tramite il terminale?",
        "answer": "Per creare file di testo si possono usare comandi come 'ni' in Windows o 'touch' in macOS/Linux. Per cancellare, si usa 'rm', e per visualizzarne il contenuto, 'cat'."
      }
    ]
  },
  {
    "title": "Componenti in Vue 3",
    "faqs": [
      {
        "question": "Cosa rende i componenti Vue utili in applicazioni complesse?",
        "answer": "I componenti Vue sono utili perché spezzettano la complessità di un'applicazione in piccoli pezzi riutilizzabili e facilmente manutenibili."
      },
      {
        "question": "Come sono organizzati i file .vue?",
        "answer": "Un file .vue contiene tre sezioni principali: Script per il codice JavaScript, Template per il codice HTML, e Style per il CSS, con l'opzione 'scoped' per isolare gli stili."
      },
      {
        "question": "Come si importa e utilizza un componente in un'app Vue?",
        "answer": "Per utilizzare un componente, si importa il file del componente e si aggiunge il suo nome nell'oggetto 'components' di Vue. Poi, si utilizza il tag del componente nel template."
      },
      {
        "question": "Quali sono i vantaggi dell'attributo 'scoped' in CSS?",
        "answer": "L'attributo 'scoped' in CSS limita lo stile al componente in cui viene dichiarato, evitando interferenze tra diversi componenti."
      }
    ]
  },
  {
    "title": "Introduzione a Vue e SASS",
    "faqs": [
      {
        "question": "Come viene utilizzato SASS in un progetto Vue?",
        "answer": "In Vue, si può utilizzare SASS aggiungendo lang='scss' nel tag <style> dei file .vue, permettendo al compilatore di interpretare la sintassi SCSS e convertirla in CSS standard."
      },
      {
        "question": "Quali sono le principali differenze tra SASS e SCSS?",
        "answer": "SASS e SCSS hanno le stesse funzionalità ma con sintassi diverse. SASS ha una sintassi più simile a YAML, senza graffe o punti e virgola, mentre SCSS ha una sintassi simile a CSS standard."
      },
      {
        "question": "Come può SASS migliorare la gestione dei CSS in un progetto?",
        "answer": "SASS rende il CSS più espressivo, organizzato e manutenibile, permettendo l'uso di variabili, annidamenti e funzioni, semplificando la gestione di stili complessi."
      },
      {
        "question": "Perché è vantaggioso usare SASS in progetti Vue?",
        "answer": "L'uso di SASS in Vue permette di scrivere stili CSS più complessi e manutenibili, migliorando l'espressività e la gestione del codice, specialmente in progetti di grandi dimensioni."
      }
    ]
  },
  {
    "title": "Introduzione a Vue con Vite",
    "faqs": [
      {
        "question": "Cos'è Node.js e perché è importante per lo sviluppo con Vue?",
        "answer": "Node.js è un runtime JavaScript basato sul motore V8 di Chrome. È fondamentale per lo sviluppo con Vue perché permette di eseguire JavaScript lato server e gestire dipendenze con NPM."
      },
      {
        "question": "Come utilizzare Node.js per lo sviluppo web?",
        "answer": "Node.js permette di eseguire un server web localmente, accedendo ai file tramite URL come 'http://localhost:8080' anziché attraverso il filesystem."
      },
      {
        "question": "Che cos'è NPM e quale ruolo gioca nello sviluppo Vue?",
        "answer": "NPM (Node Package Manager) è uno strumento per gestire l'installazione di script e applicativi in progetti Node.js, essenziale per installare e gestire librerie come Vue."
      },
      {
        "question": "Qual è il vantaggio di usare Vite in progetti Vue?",
        "answer": "Vite offre un ambiente di sviluppo rapido per progetti Vue. Consente di configurare velocemente il progetto, ottimizza le prestazioni e semplifica il processo di sviluppo."
      }
    ]
  },
  {
    "title": "Introduzione a Vue con Sass",
    "faqs": [
      {
        "question": "Che cos'è Sass e come si integra con Vue?",
        "answer": "Sass è un preprocessore CSS che permette di scrivere codice CSS più organizzato e manutenibile. Si integra con Vue permettendo l'uso della sua sintassi nei file .vue."
      },
      {
        "question": "Quali sono i vantaggi dell'uso di Sass in un progetto Vue?",
        "answer": "Sass offre vantaggi come la creazione di variabili, l'uso di mixin e funzioni, e l'annidamento dei selettori, rendendo il CSS più potente e manutenibile."
      },
      {
        "question": "Differenze tra SASS e SCSS?",
        "answer": "Sass e SCSS offrono le stesse funzionalità ma con sintassi diverse. Sass ha una sintassi più concisa e meno simile al CSS standard, mentre SCSS usa una sintassi più simile al CSS tradizionale."
      }
    ]
  },
  {
    "title": "Vue 3: $emit e Proprietà Computate",
    "faqs": [
      {
        "question": "Come si utilizza $emit in Vue.js?",
        "answer": "$emit in Vue.js è usato per inviare eventi dal componente figlio al componente genitore, permettendo una comunicazione bidirezionale."
      },
      {
        "question": "Qual è il ruolo delle proprietà computate in Vue?",
        "answer": "Le proprietà computate in Vue sono funzioni usate come variabili per trasformare dati senza alterarli, ottimizzando la gestione e la presentazione dei dati."
      },
      {
        "question": "Differenza tra metodi e proprietà computate in Vue?",
        "answer": "I metodi in Vue sono usati per modificare i dati, mentre le proprietà computate sono ideali per modificare la presentazione dei dati, come per filtri o ordini."
      },
      {
        "question": "Quando utilizzare le proprietà computate invece dei metodi?",
        "answer": "Le proprietà computate sono più efficienti dei metodi quando si necessita di ricalcolare i valori in base ai cambiamenti delle dipendenze, riducendo le esecuzioni non necessarie."
      }
    ]
  },
  {
    "title": "Gestione dello Stato in Vue 3",
    "faqs": [
      {
        "question": "Che cos'è lo state management in Vue.js?",
        "answer": "Lo state management in Vue.js è un modo per condividere dati tra più componenti, mantenendo una 'unica fonte di verità' accessibile da tutta l'applicazione."
      },
      {
        "question": "Come si evita il prop drilling in Vue?",
        "answer": "Il prop drilling, ovvero passare props a cascata, si evita con lo state management che permette l'accesso diretto ai dati condivisi senza doverli passare tra i componenti."
      },
      {
        "question": "Quali sono gli strumenti per lo state management in Vue?",
        "answer": "Vue fornisce strumenti come Vuex o l'API Composition per gestire lo stato in modo efficiente, consentendo una facile condivisione e gestione dei dati."
      },
      {
        "question": "Come si definisce lo stato globale in un'app Vue?",
        "answer": "Lo stato globale in Vue si definisce creando un file store.js con un oggetto reattivo, che viene poi importato nei componenti per accedere e manipolare i dati condivisi."
      }
    ]
  },
  {
    "title": "Vue: Gestione delle Props",
    "faqs": [
      {
        "question": "Cosa sono le props in Vue.js?",
        "answer": "Le props in Vue.js sono attributi personalizzati usati per passare dati dai componenti genitori ai componenti figli."
      },
      {
        "question": "Come si passano le props tra componenti in Vue?",
        "answer": "Le props vengono passate dal componente genitore al figlio tramite attributi nel tag del componente. Il componente figlio deve dichiarare le props ricevute."
      },
      {
        "question": "Quali sono le regole per l'uso delle props in Vue?",
        "answer": "In Vue, le props seguono un flusso unidirezionale, dal genitore al figlio. Non è consentito al componente figlio modificare direttamente le props ricevute."
      }
    ]
  },
  {
    "title": "Approfondimento su Sass",
    "faqs": [
      {
        "question": "Qual è il ruolo dei mixins in Sass?",
        "answer": "I mixins in Sass sono utilizzati per raggruppare più regole CSS in un unico blocco riutilizzabile, aiutando a mantenere il codice CSS più organizzato e a evitare la ripetizione."
      },
      {
        "question": "Come funziona la regola @use in Sass?",
        "answer": "@use in Sass è usata per importare file SCSS e CSS in un altro file. A differenza di @import, @use assicura che ogni file venga incluso una sola volta, rendendo il codice finale più leggero."
      },
      {
        "question": "Quali sono i vantaggi dell'utilizzo di Sass in progetti web?",
        "answer": "Sass offre vantaggi come la definizione di variabili, l'uso di mixins e funzioni, e l'annidamento dei selettori, rendendo il codice CSS più potente, organizzato e manutenibile."
      }
    ]
  },
  {
    "title": "Approfondimenti su Sass 2",
    "faqs": [
      {
        "question": "Cosa sono e come si utilizzano i mixins in Sass?",
        "answer": "I mixins in Sass sono blocchi di codice riutilizzabili che possono includere più regole CSS. Sono utili per gestire funzionalità CSS comuni e possono includere prefissi specifici per il browser."
      },
      {
        "question": "Come funziona la regola @use in Sass?",
        "answer": "La regola @use in Sass permette di importare file SCSS e CSS. A differenza di @import, @use garantisce che ogni file sia incluso solo una volta, migliorando l'efficienza del codice finale."
      },
      {
        "question": "Quali sono le differenze tra @use e @import in Sass?",
        "answer": "@import importa file SCSS/CSS rendendoli disponibili sia ai file successivi che all'intero file, mentre @use limita la disponibilità al file in cui è utilizzato, evitando inclusioni multiple e riducendo la duplicazione del codice."
      },
      {
        "question": "Come si gestiscono i namespace in Sass con @use?",
        "answer": "Quando si importa un file con @use, viene assegnato un namespace basato sul nome del file. È possibile utilizzare le variabili o i mixins direttamente senza passare dal namespace specificando 'as *' alla fine della riga di importazione."
      }
    ]
  }










]
